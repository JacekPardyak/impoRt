---
title: "Julia Plots"
format:
  html:
    code-fold: true
---

```{r}
```

## Parametric Plots

Plot function pair (x(u), y(u)). 
See @fig-parametric for an example.


```{julia}
#| label: fig-parametric
#| fig-cap: "Parametric Plots"

using Plots

plot(sin, 
     x->sin(2x), 
     0, 
     2Ï€, 
     leg=false, 
     fill=(0,:lavender))
```

```{julia}
#| label: fig-plots
#| fig-cap: "Multiple Plots"
#| fig-subcap:
#|   - "Plot 1"
#|   - "Plot 2"
#| layout-ncol: 2

using Plots
display(plot(sin, x -> sin(2x), 0, 2))
display(plot(x -> sin(4x), y -> sin(5y), 0, 2))
```


```{julia}
#| label: fig-surf
#| fig-cap: "Surface Plots"
#| 
using Plots

f(x, y) = sin(x) + cos(y)

surface(0:0.1:10, 0:0.1:10, f)
```

```{julia}
#| label: fig-map-nl
#| fig-cap: "Surface Plots"
#| 
using Plots

f(x, y) = sin(x) + cos(y)

surface(0:0.1:10, 0:0.1:10, f)
```

```{julia, eval = F}
import Pkg; Pkg.add(["GeoJSON", "HTTP", "Makie"])
using HTTP, GeoJSON, DataFrames
using CairoMakie
using Makie.GeometryBasics

resp = "https://service.pdok.nl/cbs/gebiedsindelingen/2023/wfs/v1_0?request=GetFeature&service=WFS&version=2.0.0&typeName=gemeente_gegeneraliseerd&outputFormat=json" |> HTTP.get 
fc = resp.body |> GeoJSON.read
fig = Figure()
ax = Axis(fig[1, 1])
poly!(ax, fc, color = colorant"gray50")
fig
```
```{julia}
using Plots, GeoJSON, DataFrames

url = "https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/"
df = download(url * "ne_50m_land.geojson") |> GeoJSON.read |> DataFrame
df.geometry |> plot
```

